#!/bin/bash
# Sanity check the schedules generated by Pluto and Polymer.

set -o errexit
set -o pipefail
set -o nounset

TIMESTAMP="$(date "+%Y%m%d-%H%M%S")"

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd)"
SOURCE_DIR="$1"
OUTPUT_DIR="/tmp/polymer/sanity-check-schedule.${TIMESTAMP}"
mkdir -p "${OUTPUT_DIR}"

LLVM_DIR="${PWD}/../../llvm"
LLVM_BINDIR="${PWD}/../../llvm/build/bin"
PLUTO_DIR="${DIR}/../../pluto"
BINDIR="${PWD}/../../build/bin"
UTILITIES_DIR="${DIR}/utilities"

PLUTO_FLAGS=(--noparallel --noprevector --nounrolljam --moredebug)
POLYBENCH_FLAGS=(-I "${UTILITIES_DIR}" -I "${LLVM_DIR}/build/lib/clang/13.0.0/include/" -D POLYBENCH_DUMP_ARRAYS -D EXTRALARGE_DATASET)

echo ">>> Sanity check Polymer schedules "
echo ""
echo "    Source dir: ${SOURCE_DIR}"
echo "    Output dir: ${OUTPUT_DIR}"
echo "    Timestamp:  ${TIMESTAMP}"
echo " Compilation flags:"
echo "    POLYBENCH_FLAGS: ${POLYBENCH_FLAGS[*]}"
echo "    PLUTO_FLAGS:     ${PLUTO_FLAGS[*]}"
echo ""

export LD_LIBRARY_PATH="${PWD}/../../build/pluto/lib:${LD_LIBRARY_PATH}"
export PATH="${PATH}:${PLUTO_DIR}"
export PATH="${LLVM_BINDIR}:${BINDIR}:${PATH}"

# Copy source files from the SOURCE_DIR to a temporary place in the OUTPUT_DIR.
function copy_source_files() {
  local src_dir="$1"
  local dst_dir="$2"

  echo ""
  echo ">>> Copying source files from ${src_dir} to ${dst_dir} ..."

  cp -r "${src_dir}"/* "${dst_dir}"

  echo ""
}

# Generate schedules from Pluto (polycc).
function gen_pluto_sched() {
  local src_file="$1"
  local dst_file="${src_file%.c}.pluto.c"
  local log_file="${dst_file%.c}.log"
  local sched_file="${dst_file%.c}.sched.log"
  
  polycc "${PLUTO_FLAGS[@]}" "${src_file}" -o "${dst_file}" 2>&1 | tee "${log_file}" &>/dev/null

  sed -n '/After intra-tile optimize/,/generating Cloog file/p' "${log_file}" | sed '1d;$d' > "${sched_file}" 2>&1
}

function gen_pluto_sched_dir() {
  local src_dir="$1"

  echo ""
  echo ">>> Generating Pluto schedules ..."

  cd "${src_dir}"
  find . -name '*.c' -not -name '*adi.c' -print0 |
    while IFS= read -r -d '' line; do 
      printf "%s " "$(basename "${line}")"
      gen_pluto_sched "$line"
    done
  cd - 2>/dev/null
}

function gen_polymer_sched() {
  local src_file="$1"
  local dst_file="${src_file%.c}.mlir"
  local log_file="${dst_file%.mlir}.polymer.log"
  local sched_file="${dst_file%.mlir}.polymer.sched.log"
  

  mlir-clang "${src_file}" "${POLYBENCH_FLAGS[@]}" 2>&1 | tee "${dst_file}" &>/dev/null
  polymer-opt \
    -reg2mem \
    -insert-redundant-load \
    -extract-scop-stmt \
    -pluto-opt="debug=1" \
    "${dst_file}" > "${log_file}" 2>&1 

  sed -n '/After intra-tile optimize/,/File generated/p' "${log_file}" | sed '1d;$d' > "${sched_file}" 2>&1
}

function gen_polymer_sched_dir() {
  local src_dir="$1"

  echo ""
  echo ">>> Generating Polymer schedules ..."

  cd "${src_dir}"
  find . -name '*.c' -not -name '*adi.c' -not -name '*.pluto.c' -print0 |
    while IFS= read -r -d '' line; do 
      printf "%s " "$(basename "${line}")"
      gen_polymer_sched "$line"
    done
  cd - 2>/dev/null
}

# Update build if necessary
function try_rebuild() {
  cd "${PWD}/../../build" && cmake --build . --target all >/dev/null 2>&1  && cd - &>/dev/null
}

function compare_sched_dir() {
  local src_dir="$1"

  echo ""
  echo ">>> Comparing Polymer schedules ..."

  find "${src_dir}" -name '*.pluto.sched.log' -print0 |
    while IFS= read -r -d '' line; do 
      printf "%30s " "$(basename "${line}")"
      pluto_log="${line}"
      polymer_log="${line%.pluto.sched.log}.polymer.sched.log"
      res=$(python -c "from compare_sched import compare_sched; print(compare_sched('""${pluto_log}""', '""${polymer_log}""'))")
      if [ "${res}" = "False" ]; then
        diff "${pluto_log}" "${polymer_log}" || echo "Diff failed."
      else
        echo "Success!"
      fi
    done
}

try_rebuild
copy_source_files "${SOURCE_DIR}" "${OUTPUT_DIR}"
gen_pluto_sched_dir "${OUTPUT_DIR}"
gen_polymer_sched_dir "${OUTPUT_DIR}"
compare_sched_dir "${OUTPUT_DIR}"
