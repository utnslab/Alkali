#!/bin/bash
# Evaluate the performance difference between Pluto and Polymer.

set -o errexit
set -o pipefail
set -o nounset

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd)"
TMPDIR="${DIR}/tmp"
mkdir -p "${TMPDIR}"

TIMESTAMP="$(date "+%Y%m%d-%H%M%S")"

# Setup xtrace debug
TRACELOG="${TMPDIR}/trace.eval-perf.${TIMESTAMP}.log"
exec 100>"${TRACELOG}"
BASH_XTRACEFD=100
set -x

PLUTO_OPTIONS="--noparallel --noprevector --nounrolljam --moredebug"
CLANG_NO_VECTORIZE_OPTIONS="-fno-vectorize -fno-slp-vectorize -fno-tree-vectorize"
CLANG_NO_UNROLL_OPTIONS="-fno-unroll-loops"
OPT_NO_VECTORIZE_OPTIONS="-force-vector-width=1 -force-vector-interleave=1"
OPT_NO_UNROLL_OPTIONS="-disable-loop-unrolling"
SKIP_EXECUTE="false"
SKIP_CODEGEN="false"
PLUTO_VARIANT=""
DELETE_WORKDIR="false"
SKIPPED_TESTS="adi"
LLVM_DIR="" # To be set later.

while getopts ":hdgsupvf:t:l:" opt; do 
  case "${opt}" in 
    h ) 
      echo ""
      echo "    Performance evaluator for Pluto and Polymer."
      echo ""
      echo "Usage: "
      echo "    -h                  Display this help message"
      echo "    -d                  Delete the working directory when finished"
      echo "    -s                  Skip the actual run"
      echo "    -g                  Skip the Pluto and Polymer codegen"
      echo "    -v                  Enable vectorization by Clang"
      echo "    -u                  Enable loop unroll by Clang"
      echo "    -p                  Enable parallelization"
      echo "    -f <target>         Evaluate the <target> file"
      echo "    -t <pluto var>      Specific Pluto variant (i64, 1d, etc.)"
      echo "    -l <LLVM dir>       Path to the llvm install directory"
      exit 0
      ;;
    f )
      TARGET="${OPTARG}"
      ;;
    d )
      DELETE_WORKDIR="true"
      ;;
    t )
      PLUTO_VARIANT="${OPTARG}"
      ;;
    g )
      SKIP_CODEGEN="true"
      ;;
    s )
      SKIP_EXECUTE="true"
      ;;
    p )
      PLUTO_OPTIONS=""
      ;;
    v )
      CLANG_NO_VECTORIZE_OPTIONS=""
      OPT_NO_VECTORIZE_OPTIONS=""
      ;;
    u )
      CLANG_NO_UNROLL_OPTIONS=""
      OPT_NO_UNROLL_OPTIONS=""
      ;;
    l )
      LLVM_DIR="${OPTARG}"
      ;;
    \? )
      echo "Invalid Option: -$OPTARG" 1>&2
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

CLANG_OPTIONS="${CLANG_NO_VECTORIZE_OPTIONS} ${CLANG_NO_UNROLL_OPTIONS}"
OPT_OPTIONS="${OPT_NO_VECTORIZE_OPTIONS} ${OPT_NO_UNROLL_OPTIONS}"

if [ "${PLUTO_VARIANT}" = "i64" ]; then
  PLUTO_OPTIONS="${PLUTO_OPTIONS} --indvar_type 64"
fi 

TEST_CASE="$(cd "$(dirname "${TARGET}")"; pwd)/$(basename "${TARGET}")"
UTILITIES_DIR="${DIR}/utilities"
PLUTO_DIR="${DIR}/../../pluto"
POLYMER_DIR="${DIR}/../../"

if [ -z "${LLVM_DIR}" ]; then
  LLVM_DIR="${DIR}/../../llvm"
fi

export PATH="${PATH}:${PLUTO_DIR}"
export PATH="${LLVM_DIR}/build/bin:${PATH}"
export PATH="${POLYMER_DIR}/build/bin:${PATH}"

# Compile and run the source file by Pluto.
# Args:
#    SRC_FILE           File to be compiled and run
# Outputs:
#    PLUTO_EXE_FILE     Path to the Pluto-compiled executable
#    PLUTO_RUN_TIME     Total run time of the Pluto-compiled executable
# Globals:
#    SKIP_EXECUTE       Skip the execution
#    SKIP_CODEGEN       Skip the codegen
#    UTILITIES_DIR      Where the polybench utilities placed
#    PLUTO_VARIANT      Specific Pluto variant
function run_pluto() 
{
  local SRC_FILE="$1"
  local PLUTO_SUFFIX=".pluto"
  if [ -n "${PLUTO_VARIANT}" ]; then
    PLUTO_SUFFIX="${PLUTO_SUFFIX}.${PLUTO_VARIANT}"
  fi

  local __RESULT_PLUTO_EXE_FILE=$2
  local __RESULT_PLUTO_RUN_TIME=$3
  local SRC_DIR
  local POLYCC_LOG
  
  POLYCC_LOG="polycc_$(date "+%Y%m%d-%H%M%S").log"
  SRC_DIR="$(dirname "${SRC_FILE}")"
  local PLUTO_SRC_FILE="${SRC_FILE%.c}${PLUTO_SUFFIX}.c"
  local PLUTO_LLVM_IR_FILE="${PLUTO_SRC_FILE%.c}.ll"
  local PLUTO_EXE_FILE="${PLUTO_SRC_FILE%.c}.exe"
  local POLYBENCH_SRC_FILE="${UTILITIES_DIR}/polybench.c"

  cd "${SRC_DIR}" >/dev/null 2>&1

  # Apply Pluto
  if [[ "${SKIP_CODEGEN}" = "false" ]]; then
    polycc ${PLUTO_OPTIONS} "${SRC_FILE}" -o "${PLUTO_SRC_FILE}" 2>&1 | tee "${POLYCC_LOG}" &>/dev/null
  fi
  if [ ! -f "${PLUTO_SRC_FILE}" ]; then
    echo "Expected Pluto output ${PLUTO_SRC_FILE} does not exist."
    exit 1
  fi

  # Compile Pluto generated code
  # if [ "${OPT_CONFIG}" = "1" ]; then
  # clang "${PLUTO_SRC_FILE}" -o "${PLUTO_LLVM_IR_FILE}" -S -emit-llvm -I "${UTILITIES_DIR}" -O -Xclang -disable-llvm-passes \
  #   -D POLYBENCH_TIME -D POLYBENCH_NO_FLUSH_CACHE -D EXTRALARGE_DATASET  
  # elif [ "${OPT_CONFIG}" = "2" ]; then
  clang  "${PLUTO_SRC_FILE}" -O3 ${CLANG_OPTIONS} -o "${PLUTO_LLVM_IR_FILE}" -S -emit-llvm -I "${UTILITIES_DIR}" \
    -D POLYBENCH_TIME -D POLYBENCH_NO_FLUSH_CACHE -D EXTRALARGE_DATASET  
  # fi

  clang "${PLUTO_LLVM_IR_FILE}" "${POLYBENCH_SRC_FILE}" -march=native -O3 ${CLANG_OPTIONS} -o "${PLUTO_EXE_FILE}" -lm \
    -D POLYBENCH_TIME -D POLYBENCH_NO_FLUSH_CACHE -D EXTRALARGE_DATASET -save-temps

  # Run the Pluto-compiled executable
  if [ "${SKIP_EXECUTE}" = "false" ]; then
    eval "$__RESULT_PLUTO_RUN_TIME"="$(taskset -c 1-1 numactl -i all "${PLUTO_EXE_FILE}")"
  fi
  eval "$__RESULT_PLUTO_EXE_FILE"="${PLUTO_EXE_FILE}"

  cd - >/dev/null 2>&1
}

# Compile and run Polymer generated MLIR code.
# Args:
#    SRC_FILE             File to be compiled and run
# Outputs:
#    POLYMER_EXE_FILE     Path to the Polymer-compiled executable
#    POLYMER_RUN_TIME     Total run time of the Polymer-compiled executable
# Globals:
#    SKIP_EXECUTE       Skip the execution
#    SKIP_CODEGEN       Skip the codegen
#    UTILITIES_DIR      Where the polybench utilities placed
function run_polymer()
{
  local SRC_FILE="$1"
  local __RESULT_POLYMER_EXE_FILE="$2"
  local __RESULT_POLYMER_RUN_TIME="$3"
  local POLYMER_ORIGIN_SRC_FILE="${SRC_FILE%.c}.mlir"
  local POLYMER_SRC_FILE="${SRC_FILE%.c}.polymer.mlir"
  local POLYMER_LLVM_IR_FILE="${SRC_FILE%.c}.polymer.ll"
  local POLYMER_LLVM_IR_OPT_FILE="${SRC_FILE%.c}.polymer.opt.ll"
  local POLYMER_CLAST_FILE="${SRC_FILE%.c}.polymer.cloog"
  local POLYMER_EXE_FILE="${SRC_FILE%.c}.polymer.exe"
  local POLYBENCH_SRC_FILE="${UTILITIES_DIR}/polybench.c"

  local SRC_DIR
  SRC_DIR="$(dirname "${SRC_FILE}")"
  cd "${SRC_DIR}"
  if [ "${SKIP_CODEGEN}" = "false" ]; then
    # Generate original MLIR code from C.
    mlir-clang "${SRC_FILE}" -I "${UTILITIES_DIR}" -I "${LLVM_DIR}/build/lib/clang/13.0.0/include/" \
      -D POLYBENCH_TIME -D POLYBENCH_NO_FLUSH_CACHE -D EXTRALARGE_DATASET \
      | tee "${POLYMER_ORIGIN_SRC_FILE}" &>/dev/null
    # Generate Polymer optimized MLIR code.
    polymer-opt \
      -reg2mem \
      -insert-redundant-load \
      -extract-scop-stmt \
      -canonicalize \
      -pluto-opt="dump-clast-after-pluto=${POLYMER_CLAST_FILE}" \
      -canonicalize \
      "${POLYMER_ORIGIN_SRC_FILE}" 2>/dev/null > "${POLYMER_SRC_FILE}"
    # Compile Polymer generated MLIR code.
    mlir-opt -lower-affine -convert-scf-to-std -canonicalize -convert-std-to-llvm "${POLYMER_SRC_FILE}" |\
      mlir-translate -mlir-to-llvmir > "${POLYMER_LLVM_IR_FILE}"
  fi

  if [ "${OPT_CONFIG}" = "2" ]; then
    opt -S "${POLYMER_LLVM_IR_FILE}" -march=native -O3 -o "${POLYMER_LLVM_IR_FILE}" 
  fi

  clang "${POLYMER_LLVM_IR_OPT_FILE}" "${POLYBENCH_SRC_FILE}" -march=native -O3 ${CLANG_OPTIONS} -o "${POLYMER_EXE_FILE}" -lm \
    -D POLYBENCH_TIME -D POLYBENCH_NO_FLUSH_CACHE -D EXTRALARGE_DATASET -save-temps

  # Run the Polymer-compiled executable
  if [ "${SKIP_EXECUTE}" = "false" ]; then
    eval "$__RESULT_POLYMER_RUN_TIME"="$(taskset -c 1-1 numactl -i all "${POLYMER_EXE_FILE}")"
  fi
  eval "$__RESULT_POLYMER_EXE_FILE"="${POLYMER_EXE_FILE}"

  cd - >/dev/null 2>&1
}

# Evaluate a whole directory.
function eval_dir() {
  local TEST_CASE="$1"
  local BASEDIR

  BASEDIR="$(basename "${TEST_CASE}")"
  local WORKDIR="${TMPDIR}/${BASEDIR}.${TIMESTAMP}"
  local WORKLOG="${TMPDIR}/${BASEDIR}.${TIMESTAMP}.log"
  local DATAFILE="${HOME}/${BASEDIR}.${TIMESTAMP}.tar.gz"

  echo ""
  echo ">>> Evaluating directory ${TEST_CASE} ..."
  echo ""
  echo "    Start time:      ${TIMESTAMP}"
  echo "    Working dir:     ${WORKDIR}"
  echo "    Result file:     ${WORKLOG}"
  echo "    Debug trace:     ${TRACELOG}"
  echo ""
  echo " Compiltaion options:"
  echo ""
  echo "    Clang options:   ${CLANG_OPTIONS}"
  echo "    Opt options:     ${OPT_OPTIONS}"
  echo "    Pluto options:   ${PLUTO_OPTIONS}"
  echo ""
  echo " All the data will be stored at: ${DATAFILE}"
  echo ""

  # Create a working directory in the tmp directory.
  mkdir -p "${WORKDIR}"
  cp -r "${TEST_CASE}"/* "${WORKDIR}"

  # Check every subdirectory. 
  for d in "${WORKDIR}"/*/; do
    BASE_FILE_NAME="$(basename "${d}")"
    TEST_FILE="${d}/${BASE_FILE_NAME}.c"

    PLUTO_RESULT_STR="${BASE_FILE_NAME}"
    POLYMER_RESULT_STR="${BASE_FILE_NAME}"

    # Run evaluation.
    if [[ ! "*${BASE_FILE_NAME}*" =~ ${SKIPPED_TESTS} ]]; then
      echo ">>> Running ${BASE_FILE_NAME} ..."
      printf "            Pluto       Polymer   \n"
      printf "         ----------- ------------ \n"

      for i in {1..5}; do
        printf "Run #%2d  " "${i}"
        run_pluto "${TEST_FILE}" PLUTO_EXE_FILE PLUTO_RUN_TIME 
        printf "%10.7f  " "${PLUTO_RUN_TIME}"
        PLUTO_RESULT_STR="${PLUTO_RESULT_STR},${PLUTO_RUN_TIME}"

        run_polymer "${TEST_FILE}" POLYMER_EXE_FILE POLYMER_RUN_TIME 
        printf "%10.7f" "${POLYMER_RUN_TIME}"
        POLYMER_RESULT_STR="${POLYMER_RESULT_STR},${POLYMER_RUN_TIME}"
        echo ""
      done

      echo "${PLUTO_RESULT_STR}" >> "${WORKLOG}"
      echo "${POLYMER_RESULT_STR}" >> "${WORKLOG}"

      echo ">>> Results updated to ${WORKLOG} "
      # echo ">>> Packing things up ..."
      # tar cf "${DATAFILE}" "${WORKDIR}" "${WORKLOG}" "${TRACELOG}"
      echo ""
    fi
  done

  if [ "${DELETE_WORKDIR}" = "true" ]; then
    rm -rf "${WORKDIR}"
  fi

}

if [ -f "${TEST_CASE}" ]; then
  # run_pluto "${TEST_CASE}" pluto_exe_file PLUTO_RUN_TIME
  # echo "Execute file: ${pluto_exe_file}"
  # echo "Pluto run time:   ${PLUTO_RUN_TIME}" 

  run_polymer "${TEST_CASE}" polymer_exe_file POLYMER_RUN_TIME
  echo "Execute file: ${polymer_exe_file}"
  echo "Polymer run time: ${POLYMER_RUN_TIME}" 
elif [ -d "${TEST_CASE}" ]; then 
  eval_dir "${TEST_CASE}"
fi
