#Specify the functionality of the target archiecture

### This example assumes ESP implementaion as described in rfc 4303
### The packet format for encapsulated packet on the wire is as follows (from RFC)
###      0                   1                   2                   3
###      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
###    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
###    |               Security Parameters Index (SPI)                 |
###    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
###    |                      Sequence Number                          |
###    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+---
###    |                    IV (optional)                              | ^ p
###    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | a
###    |                    Rest of Payload Data  (variable)           | | y
###    ~                                                               ~ | l
###    |                                                               | | o
###    +               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | a
###    |               |         TFC Padding * (optional, variable)    | v d
###    +-+-+-+-+-+-+-+-+         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+---
###    |                         |        Padding (0-255 bytes)        |
###    +-+-+-+-+-+-+-+-+-+-+-+-+-+     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
###    |                               |  Pad Length   | Next Header   |
###    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
###    |         Integrity Check Value-ICV   (variable)                |
###    ~                                                               ~
###    |                                                               |
###    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

struct dma_desc_t {
  int queue_id;
  int meta;
}

# assume 256 bits key
struct decrypt_cmd_t {
  bits<256> key;
  bits<32> length;
}

extern event NET_RECV {context ctx; buf packet;}
extern event NET_SEND {context ctx; buf packet;}


extern event DMA_SEND{context ctx; buf data; dma_desc_t desc;}
extern event DMA_RECV{context ctx; buf data; dma_desc_t desc;}

extern event DECRYPT_REQ {context ctx; buf data; decrypt_cmd_t cmd;}
extern event DECRYPT_CMPL {context ctx; buf data;}

extern handler NET_SEND(context ctx, buf packet) {}
extern handler DECRYPT_REQ:decrypt(context ctx, buf data, decrypt_cmd_t cmd) {
  buf decrypted_data;
  generate DECRYPT_CMPL:decrypt{ctx, decrypted_data};
}
extern handler DMA_SEND:dma_send(context ctx, buf data, dma_desc_t desc) {}


##############main program########## #

struct eth_header_t {
  bits<32> dst_mac_1;
  bits<16> dst_mac_2;
  bits<32> src_mac_1;
  bits<16> src_mac_2;
  bits<16> ether_type;
}

#Totoal 24 bytes
struct ip_header_t {
#Version(4), IHL(4), DSCP(6), ECN(2)
  bits<8> misc;
  bits<16> length;
  bits<16> identification;
#Flags(3), Fragment Offset(13)
  bits<16> fragment_offset;

#TTL(8), Transport Protocol(8)
  bits<16> TTL_transport;
  bits<16> checksum;
  bits<32> source_ip;
  bits<32> dst_ip;
  bits<32> options;
}

struct esp_h {
  bits<32> spi;
  bits<32> seq;
}

[instances=(t1,t2,t3,t4,t5,t6,t7,t8)] handler NET_RECV:process_packet(context ctx, buf packet) {
  eth_header_t eth_header;
  ip_header_t ip_header;
  esp_h esp_header;
  decrypt_cmd_t cmd;
  bits<32> tmp;

  packet.extract(eth_header);
  packet.extract(ip_header);
  packet.extract(esp_header);

  ctx.eth_header = eth_header;
  ctx.ip_header = ip_header;
  ctx.esp_header = esp_header;

  ## Remove protocol specific header (E.g. RFC4106)
  generate DECRYPT_REQ:decrypt{ctx, packet, cmd};
}

controller DECRYPT_REQ() {
    # queue_length=100, batch=4
    # TODO: support more types of queue, defined by spec;
    Queue(100, 4);
}

handler DECRYPT_CMPL:decrypt(context ctx, buf data) {
  eth_header_t tmp_header;
  ip_header_t ip_header;
  esp_h esp_header;
  buf dma_out;
  # dma_desc_t desc;

  tmp_header = ctx.eth_header;
  ip_header = ctx.ip_header;
  esp_header = ctx.esp_header;

  bits<32> tmp_mac_1;
  bits<16> tmp_mac_2;

  tmp_mac_1 = tmp_header.dst_mac_1;
  tmp_mac_2 = tmp_header.dst_mac_2;
  tmp_header.dst_mac_1 = tmp_header.src_mac_1;
  tmp_header.dst_mac_2 = tmp_header.src_mac_2;
  tmp_header.src_mac_1 = tmp_mac_1;
  tmp_header.src_mac_2 = tmp_mac_2;

  dma_out.emit(tmp_header);
  dma_out.emit(ip_header);
  dma_out.emit(esp_header);
  dma_out.emit(data);

  generate NET_SEND:net_send{ctx, dma_out};
}