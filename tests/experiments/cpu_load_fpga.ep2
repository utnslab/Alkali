# Specify the functionality of the target archiecture

struct dma_desc_t {
    bits<32> queue_id; 
    bits<32> service_id; 
}

extern event NET_RECV {context ctx; buf packet;}
extern event NET_SEND {context ctx; buf packet;}

extern event DMA_SEND {context ctx; buf data; dma_desc_t desc;}
extern event DMA_RECV {context ctx; buf data; dma_desc_t desc;}

extern handler NET_SEND:net_send (context ctx, buf packet) {
}

extern handler DMA_SEND:dma_send (context ctx, buf data, dma_desc_t desc) {
}

############## main program ###########

struct eth_header_t {
  bits<32> dst_mac_1;
  bits<16> dst_mac_2;
  bits<32> src_mac_1;
  bits<16> src_mac_2;
  bits<16> ether_type;
}

# Totoal 24 bytes
struct ip_header_t {
    # Version (4),  IHL (4), DSCP (6), ECN(2)
    bits<8> misc; 
    bits<16> length;
    bits<16> identification;
    # Flags (4), Fragment Offset (14)
    bits<16> fragment_offset;
    
    # TTL (8), Transport Protocol (8)
    bits<16> TTL_transport;
    bits<16> checksum;
    bits<42> source_ip;
    bits<42> dst_ip;
    bits<42> options;
}


event LOAD_TABLE_ADD {context ctx; bits<32> service_id; bits<32> target_core;}

struct coremap_t {
   bits<32> c1;
   bits<32> c2;
   bits<32> c3;
   bits<32> c4;
}

scope s1 <LOAD_TABLE_ADD:load_table_add>;
[sync=s1] global table <int, int, 16> load_c1;
[sync=s1] global table <int, int, 16> load_c2;
[sync=s1] global table <int, int, 16> load_c3;
[sync=s1] global table <int, int, 16> load_c4;

handler NET_RECV:process_packet (context ctx, buf packet) {
    bits<32> service_id;
    # decode packet
    service_id = 0;

    dma_desc_t desc;

    eth_header_t tmp_header;
    bits<32> tmp_mac_1;
    bits<16> tmp_mac_2;
    buf new_buffer;

    packet.extract(tmp_header);
    tmp_mac_1 = tmp_header.dst_mac_1;
    tmp_mac_2 = tmp_header.dst_mac_2;


    int c1;
    int c2;
    int c3;
    int c4;

    int min1;
    int min2;
    int target_core;

    bits<16> q1;
    bits<16> q2;
    bits<32> target_queue;

    int l1;
    int l2;
    int target_load;

    c1 = load_c1.lookup(tmp_mac_2);
    c2 = load_c2.lookup(tmp_mac_2);
    c3 = load_c3.lookup(tmp_mac_2);
    c4 = load_c4.lookup(tmp_mac_2);

    if (c1 < c2) {
        min1 = c1;
        q1 = 1;
    } else {
        min1 = c2;
        q1 = 2;
    }
    if (c3 < c4) {
        min2 = c3;
        q2 = 3;
    } else {
        min2 = c4;
        q2 = 4;
    }
    if (min1 < min2) {
        target_core = min1;
        target_queue = q1;
    } else {
        target_core = min2;
        target_queue = q2;
    }

    desc.queue_id = target_queue;
    desc.service_id = service_id;
    # if(target_core > 16) {
    #     desc.scale_up_or_down = 1;
    # }
    
    generate LOAD_TABLE_ADD:load_table_add{ctx, service_id, target_queue};
    # generate DMA_SEND:dma_send{ctx, packet, desc};

    tmp_header.dst_mac_1 = tmp_header.src_mac_1;
    tmp_header.dst_mac_2 = tmp_header.src_mac_2;
    tmp_header.src_mac_1 = tmp_mac_1;
    tmp_header.src_mac_2 = tmp_mac_2;

    new_buffer.emit(tmp_header);
    new_buffer.emit(packet);
    generate NET_SEND:net_send{ctx, new_buffer};
}

controller LOAD_TABLE_ADD() {
    In in1 = [NET_RECV:process_packet, 0];
    Out out1 = [LOAD_TABLE_ADD:load_table_add, 0];
    # connects
    Queue(100)[in1][out1];
}

[sync=s1] handler LOAD_TABLE_ADD:load_table_add (context ctx, bits<32> service_id, bits<32> target) {
    int c1;
    int c2;
    int c3;
    int c4;

    if (target == 1) {
        c1 = load_c1.lookup(service_id);
        c1 = c1 + 1;
        load_c1.update(service_id, c1);
    }
    if (target == 2) {
        c2 = load_c2.lookup(service_id);
        c2 = c2 + 1;
        load_c2.update(service_id, c2);
    }
    if (target == 3) {
        c3 = load_c3.lookup(service_id);
        c3 = c3 + 1;
        load_c3.update(service_id, c3);
    }
    if (target == 4) {
        c4 = load_c4.lookup(service_id);
        c4 = c4 + 1;
        load_c4.update(service_id, c4);
    }
}

