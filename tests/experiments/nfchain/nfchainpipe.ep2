struct dma_write_cmd_t {
    bits<32> addr; 
    bits<32> size; 
}

extern event NET_RECV {context ctx; buf packet;}
extern event NET_SEND{context ctx; buf packet;}

extern event DMA_WRITE_REQ{context ctx; buf data; dma_write_cmd_t desc;}

[location=cu7]  extern handler NET_SEND:net_send (context ctx, buf packet) {
}

[location=cu8] extern handler DMA_WRITE_REQ:dma_write (context ctx, buf data, dma_write_cmd_t desc) {
}

############## main program ###########

struct eth_header_t {
    bits<48> dst_mac;
    bits<48> src_mac;
    bits<16> ether_type;
}

# Totoal 24 bytes
struct ip_header_t {
    # Version (4),  IHL (4), DSCP (6), ECN(2)
    bits<16> misc; 
    bits<16> length;
    bits<16> identification;
    # Flags (3), Fragment Offset (13)
    bits<16> fragment_offset;
    
    # TTL (8), Transport Protocol (8)
    bits<16> TTL_transport;
    bits<16> checksum;
    bits<32> source_ip;
    bits<32> dst_ip;
    bits<32> options;
}

struct tcp_header_t {
    bits<16> sport;                   # /** Source port */
    bits<16> dport;                   # /** Destination port */

    bits<32> seq;                     # /** Sequence number */

    bits<32> ack;                     # /** Acknowledgement number */

    bits<8>  off;                   # /** Data offset */
    bits<8>  flags;                   # /** Flags */
    bits<16> win;                     # /** Window */

    bits<16> sum;                     # /** Checksum */
    bits<16> urp;                     # /** Urgent pointer */
}

struct flow_state_t
{
    bits<32> tx_next_seq;             # /*> Sequence number of next byte to be sent */
    bits<16> flags;                   # /*> RX/TX Flags */
    bits<16> dupack_cnt;              # /*> Duplicate ACK count */
    bits<32> rx_len;                  # /*> Length of receive buffer */
    bits<32> rx_avail;                # /*> Available RX buffer space */
    bits<32> rx_next_seq;             # /*> Next sequence number expected */
    bits<32> rx_next_pos;             # /*> Offset of next byte in RX buffer */
    bits<32> rx_ooo_len;              # /*> Length of Out-of-Order bytes */
    bits<32> rx_ooo_start;            # /*> Start position of Out-of-Order bytes */

    bits<16> sport;                   # /** Source port */
    bits<16> dport;                   # /** Destination port */

    bits<32> seq;                     # /** Sequence number */

    bits<32> ack;                     # /** Acknowledgement number */

    bits<8>  off;                   # /** Data offset */
    bits<8>  flags;                   # /** Flags */
    bits<16> win;                     # /** Window */

    bits<16> sum;                     # /** Checksum */
    bits<16> urp;                     # /** Urgent pointer */
    bits<16> TTL_transport;
    bits<16> checksum;
    bits<32> source_ip;
    bits<32> dst_ip;
    bits<32> options;
}

struct pkt_info_t
{
    bits<64> mac_src;
    bits<64> mac_dst;                  # /*> Length of receive buffer */
    bits<32> ip_src;
    bits<32> ip_dst;
    bits<16> port_src;
    bits<16> port_dst;
}

struct flow_tracker_t
{
    bits<32> total_packet_cnt;
    bits<32> total_byte_cnt;
}

struct err_tracker_t
{
    bits<32> total_drop_cnt;
    bits<32> total_err_cnt;
}

struct ip_tracker_t
{
    bits<32> ip_src_cnt;
    bits<32> ip_dst_cnt;
}

struct tcp_tracker_t
{
    bits<32> tcp_src_port_cnt;
    bits<32> tcp_dst_port_cnt;
}

struct firewall_ip_entries_t
{
    bits<32> new_ip_src;
    bits<32> new_ip_dst;
    bits<32> priority;
    bits<32> timeout;
    bits<32> if_allow;
}

struct firewall_tcpport_entries_t
{
    bits<32> new_tcp_src;
    bits<32> new_tcp_dst;
    bits<32> priority;
    bits<32> timeout;
    bits<32> if_allow;
}
struct priority_entries_t
{
    bits<32> cookies;
    bits<32> cookiesx;
}



struct firewall_meta_header_t
{
    bits<32> fid;
    bits<32> allow;
    bits<32> acc_priority;
}

struct lb_DIP_entries_t
{
    bits<64> mac_src;
    bits<64> mac_dst;                  # /*> Length of receive buffer */
    bits<32> ip_src;
    bits<32> ip_dst;
    bits<16> port_src;
    bits<16> port_dst;
    bits<32> if_alloc;
}

struct lb_fwd_tcp_hdr_t
{
    bits<64> raw1;                  
    bits<64> raw2;                  
    bits<32> raw3;                  
}


# We assume cu1-12 on island1 and cu13-24 on island2
[instances=(lmem_cu1, lmem_cu4, lmem_cu13, lmem_cu17)] global table <bits<32>, firewall_ip_entries_t, 64> firewall_ip_table;
[instances=(cls_island1, cls_island1, cls_island2, cls_island2)] global table <bits<16>, firewall_tcpport_entries_t, 64> firewall_tcpport_table;
[instances=(cls_island1, cls_island1, cls_island2, cls_island2)] global table <bits<32>, priority_entries_t, 64> priority_table;
[instances=(lmem_cu2, lmem_cu5, lmem_cu14, lmem_cu18)] global table <bits<32>, flow_tracker_t, 64> flow_tracker_table;
[instances=(lmem_cu2, lmem_cu5, lmem_cu15, lmem_cu18)] global table <bits<32>, tcp_tracker_t, 64> tcp_tracker_table;
[instances=(cls_island1, cls_island1, cls_island2, cls_island2)] global table <bits<32>, err_tracker_t, 64> err_tracker_table;
[instances=(cls_island1, cls_island1, cls_island2, cls_island2)] global table <bits<32>, ip_tracker_t, 64> ip_tracker_table;
[instances=(lmem_cu3, lmem_cu6, lmem_cu16, lmem_cu19)] global table <bits<32>, lb_DIP_entries_t, 64> lb_table;
[instances=(cls_island1, cls_island1, cls_island2, cls_island2)] global table <bits<32>, lb_fwd_tcp_hdr_t, 64> lb_fwd_table;

controller OoO_DETECT1() {
    In in1 = [NET_RECV:process_packet, 1];
    Out out1 = [OoO_DETECT1:OoO_detection1, 1];
    # connects
    Queue(32)[in1][out1];
}

controller OoO_DETECT2() {
    In in1 = [OoO_DETECT1:OoO_detection1, 1];
    Out out1 = [OoO_DETECT2:OoO_detection2, 1];
    # connects
    Queue(32)[in1][out1];
}

event OoO_DETECT1 {context ctx; buf packet; int fid; bits<32> src_ip; bits<16> src_port;}
event OoO_DETECT2 {context ctx; buf packet; int fid;}

[instances=(cu1, cu4, cu13, cu17)] handler NET_RECV:process_packet (context ctx, buf packet) {
    eth_header_t eth_header;
    ip_header_t ip_header;
    tcp_header_t tcp_header;
    pkt_info_t pkt_info;
    firewall_ip_entries_t firewall_ip_entries;
    firewall_tcpport_entries_t firewall_tcpport_entries;
    priority_entries_t priority_entry1;
    priority_entries_t priority_entry2;

    packet.extract(eth_header);
    packet.extract(ip_header);
    packet.extract(tcp_header);

    bits<32> fid;
    fid = ip_header.source_ip + ip_header.dst_ip + tcp_header.sport + tcp_header.dport;

    # firewall logic
    bits<32> src_ip;
    src_ip = ip_header.source_ip;
    firewall_ip_entries = firewall_ip_table.lookup(src_ip);
    bits<16> src_port;
    src_port = tcp_header.sport;
    firewall_tcpport_entries = firewall_tcpport_table.lookup(src_port);
    priority_entry1 = priority_table.lookup(firewall_tcpport_entries.priority);
    priority_entry2 = priority_table.lookup(firewall_ip_entries.priority);
    firewall_meta_header_t meta_header;

    meta_header.allow = firewall_tcpport_entries.if_allow + firewall_ip_entries.if_allow;
    meta_header.acc_priority = priority_entry2.cookies + priority_entry1.cookies;
    packet.emit(meta_header);
    
   generate OoO_DETECT1:OoO_detection1{ctx, packet, fid, src_ip, src_port};

}

[instances=(cu2, cu5, cu15, cu18)] handler OoO_DETECT1:OoO_detection1 (context ctx, buf packet, bits<32> fid, bits<32> src_ip, bits<16> src_port) {

    # flow tracker logic
    flow_tracker_t flow_tracker_entry;
    flow_tracker_entry = flow_tracker_table.lookup(fid);
    flow_tracker_entry.total_packet_cnt = flow_tracker_entry.total_packet_cnt + 1;
    flow_tracker_table.update(fid, flow_tracker_entry);
    
    tcp_tracker_t tcp_tracker_entry;
    tcp_tracker_entry = tcp_tracker_table.lookup(src_port);
    tcp_tracker_entry.tcp_src_port_cnt = tcp_tracker_entry.tcp_src_port_cnt + 1;
    tcp_tracker_table.update(src_port, tcp_tracker_entry);

    ip_tracker_t ip_tracker_entry;
    ip_tracker_entry = ip_tracker_table.lookup(src_ip);
    ip_tracker_entry.ip_src_cnt = ip_tracker_entry.ip_src_cnt + 1;
    ip_tracker_table.update(src_ip, ip_tracker_entry);

    err_tracker_t err_tracker_entry;
    err_tracker_entry = err_tracker_table.lookup(fid);
    err_tracker_entry.total_drop_cnt = err_tracker_entry.total_drop_cnt + 1;
    err_tracker_table.update(fid, err_tracker_entry);

    generate OoO_DETECT2:OoO_detection2{ctx, packet, fid};
}

[instances=(cu3, cu6, cu16, cu19)] handler OoO_DETECT2:OoO_detection2 (context ctx, buf packet, bits<32> fid) {

    #L4 load balancer
    bits<32> base_ip_src;
    base_ip_src = 134744072;
    bits<32> base_ip_dst;
    base_ip_dst = 134744071;
    bits<16> base_port_src;
    base_port_src = 50;
    bits<16> base_port_dst;
    base_port_dst = 60;
    lb_DIP_entries_t lb_DIP_entry;
    lb_DIP_entry = lb_table.lookup(fid);
    lb_DIP_entry.if_alloc = 1;
    lb_DIP_entry.mac_src =  lb_DIP_entry.mac_src + fid;
    lb_DIP_entry.mac_dst =  lb_DIP_entry.mac_dst + fid;
    lb_DIP_entry.ip_src = base_ip_src + fid;
    lb_DIP_entry.ip_dst = base_ip_dst + fid;
    lb_DIP_entry.port_src = base_port_src + fid;
    lb_DIP_entry.port_dst = base_port_dst + fid;
    lb_table.update(fid, lb_DIP_entry);

    bits<32> new_fid;
    new_fid = lb_DIP_entry.ip_src + lb_DIP_entry.ip_dst + lb_DIP_entry.port_src + lb_DIP_entry.port_dst;
    lb_fwd_tcp_hdr_t new_tcp_hdr;
    new_tcp_hdr = lb_fwd_table.lookup(new_fid);
    packet.emit(new_tcp_hdr);

    # firewall logic
    generate NET_SEND:net_send{ctx, packet};
}